# -*- coding: utf-8 -*-
"""week3 sun.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1raAy2LPwSrtvnY4d8MvQJ6aVX48_O3II

**OOPs**

Object = atribute(color,size), behaviour (sing)
Methods:
Methods are functions defined inside the body of a class. They are used to define the behaviors of an object.
"""

class Parrot:
    
    # instance attributes
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    # instance method
    def sing(self, song):
        return "{} sings {}".format(self.name, song)

    def dance(self):
        return "{} is now dancing".format(self.name)

# instantiate the object
blu = Parrot("Blu", 10)

# call our instance methods
print(blu.sing("'Happy'"))
print(blu.dance())

"""1. Programs to display principal of OOPs

Inheritance	- A process of using details from a new class without modifying existing class.

---

Encapsulation	- Hiding the private details of a class from other objects. - only showing the abstraction

---
Polymorphism	- A concept of using common operation in different ways for different data input.

In the below program, we created two classes i.e. Bird (parent class) and Penguin (child class). The child class inherits the functions of parent class. We can see this from swim() method. Again, the child class modified the behavior of parent class. We can see this from whoisThis() method. Furthermore, we extend the functions of parent class, by creating a new run() method.

Additionally, we use super() function before __init__() method. This is because we want to pull the content of __init__() method from the parent class into the child class.
"""

#Inheritance

# parent class
class Bird:
    
    def __init__(self):
        print("Bird is ready")

    def whoisThis(self):
        print("Bird")

    def swim(self):
        print("Swim faster")

# child class
class Penguin(Bird):

    def __init__(self):
        # call super() function
        super().__init__()
        print("Penguin is ready")

    def whoisThis(self):
        print("Penguin")

    def run(self):
        print("Run faster")

peggy = Penguin()
peggy.whoisThis()
peggy.swim()
peggy.run()

"""**Encapsulation**


---


Using OOP in Python, we can restrict access to methods and variables. This prevent data from direct modification which is called encapsulation. In Python, we denote private attribute using underscore as prefix i.e single “ _ “ or double “ __“.

In the below program, we defined a class Computer. We use __init__() method to store the maximum selling price of computer. We tried to modify the price. However, we can’t change it because Python treats the __maxprice as private attributes. To change the value, we used a setter function i.e setMaxPrice() which takes price as parameter.
"""

class Computer:

    def __init__(self):
        self.__maxprice = 900

    def sell(self):
        print("Selling Price: {}".format(self.__maxprice))

    def setMaxPrice(self, price):
        self.__maxprice = price

c = Computer()
c.sell()

# change the price
c.__maxprice = 1000
c.sell()

# using setter function
c.setMaxPrice(1000)
c.sell()

"""**Polymorphism**


---


Polymorphism is an ability (in OOP) to use common interface for multiple form (data types).

Suppose, we need to color a shape, there are multiple shape option (rectangle, square, circle). However we could use same method to color any shape. This concept is called Polymorphism.

In the above program, we defined two classes Parrot and Penguin. Each of them have common method fly() method. However, their functions are different. To allow polymorphism, we created common interface i.e flying_test() function that can take any object. Then, we passed the objects blu and peggy in the flying_test() function, it ran effectively.
"""

class Parrot:

    def fly(self):
        print("Parrot can fly")
    
    def swim(self):
        print("Parrot can't swim")

class Penguin:

    def fly(self):
        print("Penguin can't fly")
    
    def swim(self):
        print("Penguin can swim")

# common interface
def flying_test(bird):
    bird.fly()

#instantiate objects
blu = Parrot()
peggy = Penguin()

# passing the object
flying_test(blu)
flying_test(peggy)

"""Program to ask birthday date"""

from datetime import datetime

def get_user_birthday():
    year = int(input('When is your birthday? [YY] '))
    month = int(input('When is your birthday? [MM] '))
    day = int(input('When is your birthday? [DD] '))

    birthday = datetime(2000+year,month,day)
    return birthday

def calculate_dates(original_date, now):
    delta1 = datetime(now.year, original_date.month, original_date.day)
    delta2 = datetime(now.year+1, original_date.month, original_date.day)
    days = (max(delta1, delta2) - now).days
    # alternatively:
    # days = max(delta1, delta2).total_seconds() / 60 / 60 /24

    return days

bd = get_user_birthday()
now = datetime.now()
c = calculate_dates(bd, now)

print(c)

name = str(input("please enter your name"))
year = int(input('When is your birthday? [YYYY] '))
month = int(input('When is your birthday? [MM] '))
day = int(input('When is your birthday? [DD] '))
cy = 2019
x = cy-year
print("Your age is",x)

def m_d(y):
  if y == "1" or y == "2" or y == "3" or y == "4" or y =="5" or y == "6"or y == "7"or y == "8"or y == "9"or y == "10"or y == "11"or y == "":

def cntn (n):
  x = str(input("Kindly enter your name"))
  y = str(input("kindly enter your prefix for eg 0,z,o,u"))
  z = int(input("enter number of your initials:"))
  print (x[0:z]+y)
 
cntn ("Nitin")

name = str(input("please enter your name"))
year = int(input('When is your birthday? [YYYY] '))
month = int(input('When is your birthday? [MM] '))
day = int(input('When is your birthday? [DD] '))
cy = 2019
x = cy-year
print("Your age is",x)

def m_d(y):
  if y == "January" or y == "March" or y == "May" or y == "July" or y =="December":
    print ("your selected month {} has 31 number of days".format(y))
  elif y == "February". format(y):
    print ("your month of {} is 28")
  elif y == "September" or y == "October" or y == "June". format(y):
    print ("your month of {} is 30 days")
  else:
    print ("not correct month {}")

def flower ():
  t = str(input("Kindly enter flower name"))
  if t == "rose":
    print ("roses are red")
  elif t == "lotus":
    print("lotus are pink")
  elif t == "lily":
    print("lilies are white")
  elif t == "sunflower":
    print("sfs are yellow")
  else:
    print("invalid flower")
 

flower()

import random
x = random.randint(1,100)
print (x)

"""While Sue for choosing number"""

import random
x = random.randint(1,100)
print (x)
y = 0

while y < 3:
      t = int(input("please choose your 1st number: "))
      if t == x:
        print ("Congratulations")
      else:
        print("sorry")
      y += 1
  
print("Sorry try again, the value of number is {}".format(x))

import random
x = random.randint(1,100)
print (x)
y = 0
z = str(input("please enter your name"))
for y in range(3):
  t = int(input("please choose your 1st number: "))
  if t == x or z == "vedant":
    print ("Congratulations")
  else:
    print("sorry")

"""Program to ask name, date of birth , gender and tell them there sunshine

Aries: April 18 - May 13

Taurus: May 13 - June 21

Gemini: June 21 - July 20

Cancer: July 20 - Aug. 10

Leo: Aug. 10 - Sept. 16

Virgo: Sept. 16 - Oct.

Libra: Oct. 30 - Nov. 23

Scorpio: Nov. 23 - Nov. 29

Ophiuchus: Nov. 29 - Dec. 17

Sagittarius: Dec. 17 - Jan. 20

Capricorn: Jan. 20 - Feb. 16

Aquarius: Feb. 16 - March 11

Pisces: March 11- April 18
"""

day = int(input("Input birthday: "))
gender = str(input("your gender"))
month = input("Input month of birth (e.g. march, july etc): ")
if month == 'december':
	astro_sign = 'Sagittarius' if (day < 22) else 'capricorn'
elif month == 'january':
	astro_sign = 'Capricorn' if (day < 20) else 'aquarius'
elif month == 'february':
	astro_sign = 'Aquarius' if (day < 19) else 'pisces'
elif month == 'march':
	astro_sign = 'Pisces' if (day < 21) else 'aries'
elif month == 'april':
	astro_sign = 'Aries' if (day < 20) else 'taurus'
elif month == 'may':
	astro_sign = 'Taurus' if (day < 21) else 'gemini'
elif month == 'june':
	astro_sign = 'Gemini' if (day < 21) else 'cancer'
elif month == 'july':
	astro_sign = 'Cancer' if (day < 23) else 'leo'
elif month == 'august':
	astro_sign = 'Leo' if (day < 23) else 'virgo'
elif month == 'september':
	astro_sign = 'Virgo' if (day < 23) else 'libra'
elif month == 'october':
	astro_sign = 'Libra' if (day < 23) else 'scorpio'
elif month == 'november':
	astro_sign = 'scorpio' if (day < 22) else 'sagittarius'
print("Your Astrological sign is :",astro_sign)